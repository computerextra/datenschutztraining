generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model accept {
  id   String   @id @db.VarChar(255)
  date DateTime @default(now()) @db.DateTime(0)
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  admin         Boolean         @default(false)
  accounts      Account[]
  sessions      Session[]
  Aufgaben      AufgabeOnUser[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Info {
  id         String    @id @default(cuid())
  title      String
  body       String    @db.Text
  created_at DateTime  @default(now()) @db.DateTime(0)
  updated_at DateTime? @db.DateTime(0)
}

model Aufgabe {
  id           String          @id @default(cuid())
  title        String
  body         String          @db.Text
  created_at   DateTime        @default(now()) @db.DateTime(0)
  updated_at   DateTime?       @db.DateTime(0)
  questions    Question[]
  completed_by AufgabeOnUser[]
}

model AufgabeOnUser {
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  Aufgabe    Aufgabe  @relation(fields: [aufgabeId], references: [id], onDelete: Cascade)
  aufgabeId  String
  created_at DateTime @default(now()) @db.DateTime(0)

  @@id([userId, aufgabeId])
}

model Question {
  id          String     @id @default(cuid())
  title       String
  question    String
  answer_type AnswerType
  anwers      Answer[]
  created_at  DateTime   @default(now()) @db.DateTime(0)
  updated_at  DateTime?  @db.DateTime(0)
  Aufgabe     Aufgabe?   @relation(fields: [aufgabeId], references: [id], onDelete: Cascade)
  aufgabeId   String?
}

model Answer {
  id         String    @id @default(cuid())
  title      String
  correct    Boolean   @default(false)
  Question   Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String?
  created_at DateTime  @default(now()) @db.DateTime(0)
  updated_at DateTime? @db.DateTime(0)
}

enum AnswerType {
  FREE
  MULTI
  ONE
}
